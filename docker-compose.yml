x-base: &base
  image: fastapi-celery:latest
  # volumes:
  #   - ./backend:/app
  networks:
    - appnet

services:
  caddy:
    container_name: caddy
    image: docker.io/library/caddy:2-alpine
    network_mode: host  # Only keep this if you're on Linux
    restart: unless-stopped
    volumes:
      - ./searxng-docker/Caddyfile:/etc/caddy/Caddyfile:ro
      - caddy-data:/data:rw
      - caddy-config:/config:rw
    environment:
      - SEARXNG_HOSTNAME=${SEARXNG_HOSTNAME:-http://localhost}
      - SEARXNG_TLS=${LETSENCRYPT_EMAIL:-internal}
    cap_drop:
      - ALL
    cap_add:
      - NET_BIND_SERVICE
    logging:
      driver: "json-file"
      options:
        max-size: "1m"
        max-file: "1"

  redis:
    container_name: redis
    image: docker.io/valkey/valkey:8-alpine
    command: valkey-server --save 30 1 --loglevel warning
    restart: unless-stopped
    networks:
      # - searxng
      - appnet
    volumes:
      - valkey-data2:/data
    ports:
      - "6379:6379"
    cap_drop:
      - ALL
    cap_add:
      - SETGID
      - SETUID
      - DAC_OVERRIDE
    logging:
      driver: "json-file"
      options:
        max-size: "1m"
        max-file: "1"

  searxng:
    container_name: searxng
    image: docker.io/searxng/searxng:latest
    restart: unless-stopped
    networks:
      # - searxng
      - appnet
    ports:
      - "127.0.0.1:8080:8080"
    volumes:
      - ./searxng-docker/searxng:/etc/searxng:rw
    environment:
      - SEARXNG_BASE_URL=https://${SEARXNG_HOSTNAME:-localhost}/
      - UWSGI_WORKERS=${SEARXNG_UWSGI_WORKERS:-4}
      - UWSGI_THREADS=${SEARXNG_UWSGI_THREADS:-4}
    cap_drop:
      - ALL
    cap_add:
      - CHOWN
      - SETGID
      - SETUID
    logging:
      driver: "json-file"
      options:
        max-size: "1m"
        max-file: "1"

  base_builder:
    build:
      context: .
      dockerfile: Dockerfile
    <<: *base

  fastapi:
    <<: *base
    container_name: fastapi
    command: >
      sh -c "uv sync && . .venv/bin/activate && uvicorn api:app --host 0.0.0.0 --port 8000 --reload"
    ports:
      - "8000:8000"
    depends_on:
      - redis
    environment:
      - AWS_ACCESS_KEY_ID=${AWS_ACCESS_KEY_ID}
      - AWS_SECRET_ACCESS_KEY=${AWS_SECRET_ACCESS_KEY}
      - AWS_DEFAULT_REGION=${AWS_DEFAULT_REGION}
      - AWS_SESSION_TOKEN=${AWS_SESSION_TOKEN}
      - AWS_BEDROCK_REGION=${AWS_BEDROCK_REGION}
      - DB_NAME=research-rocket.db
      - ENDPOINT=http://searxng:8080
      - CELERY_BROKER_URL=redis://redis:6379/0
      - CELERY_RESULT_BACKEND=redis://redis:6379/0
    volumes:
      - ./backend:/app
    deploy:
      resources:
        reservations:
          devices:
            - driver: nvidia
              count: all
              capabilities: [gpu]
    runtime: nvidia  # For backward compatibility if needed

  streamlit:
    <<: *base
    container_name: streamlit
    command: >
      sh -c "uv sync && . .venv/bin/activate && streamlit run frontend.py"
    ports:
      - "8501:8501"
    volumes:
      - ./frontend:/app
    environment:
      - ENDPOINT=http://fastapi:8000
      
  celery:
    <<: *base
    container_name: celery
    command: > 
      sh -c "uv sync && . .venv/bin/activate && celery -A package.workers.controller.celery_app worker --loglevel=info"
    depends_on:
      - redis
    volumes:
      - ./backend:/app
    environment:
      - AWS_ACCESS_KEY_ID=${AWS_ACCESS_KEY_ID}
      - AWS_SECRET_ACCESS_KEY=${AWS_SECRET_ACCESS_KEY}
      - AWS_DEFAULT_REGION=${AWS_DEFAULT_REGION}
      - AWS_BEDROCK_REGION=${AWS_BEDROCK_REGION}
      - AWS_SESSION_TOKEN=${AWS_SESSION_TOKEN}
      - DB_NAME=research-rocket.db
      - CELERY_BROKER_URL=redis://redis:6379/0
      - CELERY_RESULT_BACKEND=redis://redis:6379/0

  flower:
    <<: *base
    container_name: flower
    command: >
      sh -c "uv sync && . .venv/bin/activate && celery -A package.workers.controller flower --port=5555"
    ports:
      - "5556:5555"
    environment:
      - CELERY_BROKER_URL=redis://redis:6379/0
      - CELERY_RESULT_BACKEND=redis://redis:6379/0
    volumes:
      - ./backend:/app
    depends_on:
      - fastapi
      - celery
      - redis
  nextjs:
    container_name: nextjs  # Name of the container for easy reference
    build:
      context: .  # The current directory is used as the build context
      dockerfile: Dockerfile.nextjs  # Use the Dockerfile in the current directory for the build
    ports:
      - "3000:3000"  # Expose port 3000 on the container and map it to port 3000 on the host
    volumes:
      - ./_frontend:/app  # Mount the current directory (your app files) to the /app directory inside the container
    networks:
      - appnet    
    environment:
      - CHOKIDAR_USEPOLLING=true  # Enable polling for file changes (required in Docker to detect file changes)
      - WATCHPACK_POLLING=true     # Enable watchpack polling to support file watching inside Docker
    stdin_open: true  # Keep the standard input open, allows interactive access to the container
    tty: true  # Allocates a pseudo-TTY, useful for debugging and keeping the terminal interactive      

networks:
  appnet:

volumes:
  caddy-data:
  caddy-config:
  valkey-data2:
